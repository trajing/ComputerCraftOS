-- stringUtils: a bunch of extra string Manipulation functions. I will add more when I come up with new ideas/needs. Contributions very welcome


local VERSION = 1.1

function version()
	return VERSION
end

function truncateString(str, mode, a, inclusive)
	--[[
		str - (string) the base string that you want truncated
		mode - (string) truncation mode, 2 are available
			"p" - prefix, remove a substring from the first character until the first instance of character represented by parameter a
			"s" - suffix, remove a substring between the last instance of character a and the last character in the string
		a - (string) the character or pattern that you want to look out for to decide where to start snipping from the string
		inclusive = (boolean) optional, you can set inclusive to true to make this function remove everything including the pattern (a) or set to false to leave the pattern in. Defaults to true
		this function snips substrings from either the beginning or the end of string, and returns the truncated string
	]]
	
	if inclusive == false then
		inclusive = 0
	else
		inclusive = 1
	end
	if mode == "s" then
		str = string.reverse(str)
	elseif mode ~= "p" then
		return str
	end
	local index = string.find(str, a)
	local subStr = string.sub(str, index+inclusive)
	if mode == "s" then
		subStr = string.reverse(subStr)
	end
	return subStr
end

function centre(str, yLevel, suppress)
	--[[
		str - (string) the string that you want to print out in the centre of the terminal
		yLevel - (number) optional, you can set the yLevel of the string's beginning if you like. It will default to the current yLevel
		suppress - (boolean) if true then this function will not actually print the string for you (it will still return the centring coordinate though). This part of the function may be revised especially if I get feedback.
		
		this function takes a string and prints it out in the centre of the terminal. Returns the x coordinate required to start the string in the centre
	]]
	
	local cX, cY = term.getCursorPos() -- current x and y level
	local mX, mY = term.getSize() -- total x and y terminal size
	local len = string.len(str)
	yLevel = yLevel or cY
	local nX = (mX-len)/2
	term.setCursorPos(nX, yLevel)
	if suppress ~= true then
		print(str)
	end
	return nX
end
