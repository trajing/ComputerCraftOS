os.loadAPI("log") -- needs log and file api for now, will implement apiloader properly eventually
os.loadAPI("file")
log.setLoggingEnabled(true)
log.setLogPath("menuLog")
log.initLog(true)

--[[Menu API: Help creating menus.

Objectives:
	1. 

]]

local VERSION = 0.2

function newMenu(textAlignment, bodyIndent, textColor, backColor, highlightColor, indentSelected, yStart, yEnd)
	--[[
		refer to editMenuConfigActual for information in parameters
		Creates an empty table which will be used to store a menu
		Also initialises cetain variables that are used to construct the menu by using editMenuConfig()
	]]	
	
	local t = {
		["CONFIG"] = editMenuConfigActual(textAlignment, bodyIndent, textColor, backColor, highlightColor, indentSelected, yStart, yEnd)
		}
	return t
end

function editMenuConfig(menu, textAlignment, bodyIndent, textColor, backColor, highlightColor, indentSelected, yStart, yEnd)	
	--[[
		textAlignment - (string) allows the user to set whether the text is centred, set left or set right (will fully implement this in a seperate API if not done here on initial commit)
			- "l" = align left
			- "r" = align right
			- "c" = align centre
		bodyIndent - (number) allows the user to add an indent (the number adds to x value of start of each line)
		textColor - (number) on advanced computers allows the user to control the text color in the menu
		backColor - (number) on advanced computers allows the user to control the background color in the menu
		highlightColor - (number) to indicate current selection there is a highlight of this color placed on your selection
		indentSelected - (boolean) you can also indicate current selection by having the selection indented. It forces on on non-advanced computers and is optional otherwise
		yStart - (number) the y coordinate that you wish to start the menu on. defaults to 1
		yEnd - (number) the y coordinate that you wish to end the menu on. defaults to max size.
	]]
	
	menu["CONFIG"] = editMenuConfigActual(textAlignment, bodyIndent, textColor, backColor, indentSelected)
	return menu
end

local function editMenuConfigActual(textAlignment, bodyIndent, textColor, backColor, highlightColor, indentSelected, yStart, yEnd)	
	--[[
			this function edits the configuration of a menu, changing some of its properties. It is called automatically by newMenu() 
	]]
	
	backColorTemp = backColorTemp or colors.black
	if type(bodyIndent) ~= "number" then
		bodyIndent = 0
	end
	if type(yStart) ~= "number" then
		yStart = 1
	end
	if type(yEnd) ~= "number" then
		local x,y = term.getSize()
		yEnd = y
	end
	local tempConfig = {
		["alignment"] = nil,
		["bodyIndent"] = bodyIndent,
		["textColor"] = nil,
		["backColor"] = nil,
		["highlight"] = nil,
		["indentSelected"] = indentSelected,
		["yStart"] = yStart,
		["yEnd"] = yEnd,
		}
	if textAlignment == "c" or textAlignment == "l" or textAlignment == "r" then
		tempConfig["alignment"] = textAlignment
		if textAlignment == "r" then
			tempConfig["bodyIndent"] = 0
		end
	else
		tempConfig["alignment"] = "l"
	end
	if term.isColor() == true then
		local backColorTemp = backColor or colors.black
		tempConfig["backColor"] = backColorTemp
		tempConfig["textColor"] = textColor or colors.white
		tempConfig["highlight"] = highlightColor or backColorTemp
	else
		tempConfig["indentSelected"] = true
	end
	return tempConfig
end

function addOptionToMenu(menu, message, data)
	--[[
		targetSelectionMenu - (table) the menu you are adding this option to.
		message - (string) the name of the option
		data - (any type) optional, any extra data you wish to be returned if this option is selected. If nil then it defaults to the same as message. Supports in any value type.
		
		To add an option to an existing menu, use this function. It packs up all the relevant data and loads it into the menu so it can be used later.
	]]
	
	local temp = {
		["message"] = message,
		["data"] = data or message,
		["selected"] = false, -- This stores whether or not this option is currently selected by the user
		}
	table.insert(menu, 0, temp)
end

local function convertColumnMenu(menu, config)
	--[[
		menu - (table) The menu object that you want to display.
		
		This function converts a menu into pages so that it can be displayed properly
	
	]]
	menu["CONFIG"] = nil
	local formatMenu = {}
	do -- This block arranges the root table into pages for easier monitor display
		local pageNumber = 1
		local pageHeight = config["yEnd"] - config["yStart"]
		print(config["yStart"])
		print(config["yEnd"])
		local pagesRequired = math.ceil(#menu/pageHeight)
		log.printAndLog("Pages Required = "..pagesRequired)
		log.printAndLog("Pages Height = "..pageHeight)
		local optionKey = 0
		for i = 1, pagesRequired do
			formatMenu[i] = {}
			log.printToLog("Loading page #"..i)
			for j = 1, pageHeight do
				optionKey = optionKey + 1
				if menu[optionKey] == nil then
					break
				else
					formatMenu[i][j] = menu[optionKey]
					log.printToLog("Adding new option to page "..i)
					log.printToLog("\t"..optionKey..": "..menu[optionKey]["message"])
				end
			end	
		end	
	end
	return formatMenu
end

function initColumnMenu()

end

function drawColumnMenu(menu, config, suppressConversion)
	--[[
		menu - (table) The menu object that you want to display.
		
		This function draws the menu out and highlights (and/or indents) the selected answer. This is called automatically everytime you navigate through the menu using navigateMenu(). It knows a selection is highlighted because the menu part has a true value stored in it. 	
		Currently unfinished
	
	]]
	
	if config == nil then
		log.printToLog("Loading config")
		config = menu["CONFIG"]
	end
	if suppressConversion ~= true then	
		log.printToLog("Converting menu to vertical page format")
		menu = convertColumnMenu(menu, config)
	else
		log.printToLog("Menu conversion suppressed")
	end
	
end

function navigateColumnMenuKB(menu)
	--[[
		menu - (table) The menu object that you want to navigate through.
		
		This function allows you to navigate through a menu using the direction keys on your keyboard. Up and down work as expected and left and right allow you to cycle through whole pages at a time.
		You should call drawMenu() once before you call navigateMenu
		Will start soon
	]]
	
end

function navigateColumnMenuM(menu)
	--[[
		menu - (table) The menu object that you want to navigate through.
		
		This function allows you to navigate through a menu with a mouse.
	]]
	
end


log.printToLog("Loading up menu options")
local x,y = term.getSize()
local menu = newMenu("l", 3, colors.pink, nil, colors.purple, true, 3, 10)
local options = {
	[1] = "Anna",
	[2] = "Elsa",
	[3] = "Bonnibel",
	[4] = "Aurora",
	[5] = "Belle",
	[6] = "Ariel",
	[7] = "Glinda",
	[8] = "Nessarose",
	[9] = "Jasmine",
	[10] = "Cinderella",
	}

for i,v in pairs(options) do
	addOptionToMenu(menu, v, i)
end

local sMenu = textutils.serialize(menu)
log.printToLog("Displaying Raw Menu Configuration\n")
log.printToLog(sMenu)

log.printToLog("Drawing menu")

drawColumnMenu(menu)






